# api/prompt_evaluation.py

def match_evaluation_prompt(resume_info: str, jd_info: str) -> str:
    return f"""
Evaluate how well the resume fits the job description.

Job Description Info:
{jd_info}

Resume Info:
{resume_info}

Use the following algorithm to calculate a rate_score out of 100:
Calculate a rating out of 100 using this weighted breakdown:
- Skills match (60 points): Compare key_skills and technologies_and_tools from both resume and JD. Full match = 60. Deduct proportionally.
- Years of experience (20 points): If experience meets or exceeds JD expectations = 20, else deduct proportionally.
- Relevant certifications (10 points): If matching certs are found = 10, else 0.
- Bonus (up to 10 points): Award based on notable achievements, extra relevant skills, or well-aligned roles.

Sum the above and return a final score out of 100.

Output json format:
- "resume_title": the name of candidate and contact info,
- "job_title": Job title & company name,
- "resume_summary": Provide a summary of how well the resume matches the job in maximum two lines,
- "ratting": ratescore generated by LLM,
- "ratting_strategy": give the details based on algorithm (three line max),
- "missing_skills": The skills required in Job Description but not present in resume into,
- "missing_tools": The tools/software required in Job Description but not present in resume into,

Guidelines:
- Return only **valid JSON**. No comments, markdown, or extra text.
- Use lowercase snake_case keys.
- Do not fabricate information. If a field is missing, return an empty list or null.
- Be precise and consistent with formatting.
"""
